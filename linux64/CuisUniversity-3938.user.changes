

----STARTUP---- (29 October 2019 15:00:40) as /home/drenteria/Documentos/isI/isw1/linux64/CuisUniversity-3938.image!


----End fileIn of /home/drenteria/Downloads/DesignPatterns-Proxy.st----!

----End fileIn of /home/drenteria/Downloads/TerniLapilli4.st----!

----SNAPSHOT----(29 October 2019 16:38:27) CuisUniversity-3938.image priorSource: 14319118!

----QUIT----(29 October 2019 16:38:34) CuisUniversity-3938.image priorSource: 14316496!

----STARTUP---- (31 October 2019 13:55:06) as /home/drenteria/Documentos/isI/isw1/linux64/CuisUniversity-3938.image!


TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'dr 10/31/2019 13:56:43'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(31 October 2019 13:57:05) CuisUniversity-3938.image priorSource: 14316589!

----QUIT----(31 October 2019 13:57:08) CuisUniversity-3938.image priorSource: 14317133!

----STARTUP---- (31 October 2019 14:38:06) as /home/drenteria/Documentos/isI/isw1/linux64/CuisUniversity-3938.image!


!classDefinition: #Cart category: #TusLibros stamp: 'dr 10/31/2019 14:40:19'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'dr 10/31/2019 14:40:06'!
test01NewCartIsEmpty

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 14:40:22'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:40:33'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:40:40' prior: 50779085!
isEmpty
	
	^ true.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 14:40:44'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 14:40:44'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:43:10'!
test02CartWithProductIsNotEmpty

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:43:28' prior: 50779098!
test02CartWithProductIsNotEmpty

	| cart |
	cart := Cart new.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:43:57' prior: 50779104!
test02CartWithProductIsNotEmpty

	| cart |
	cart := Cart new.
	cart add: #aBook.
	
	self deny: cart isEmpty.! !

!classDefinition: #Book category: #TusLibros stamp: 'dr 10/31/2019 14:45:12'!
Object subclass: #Book
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:45:20' prior: 50779110!
test02CartWithProductIsNotEmpty

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	cart add: aBook.
	
	self deny: cart isEmpty.! !

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 14:45:34'!
ERROR!

!classDefinition: #Cart category: #TusLibros stamp: 'dr 10/31/2019 14:47:23'!
Object subclass: #Cart
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:47:21'!
add: aBook

	^ contents add: aBook.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:48:08'!
initialize

	contents := OrderedCollection new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:48:24' prior: 50779089!
isEmpty
	
	^contents isEmpty.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:48:28' prior: 50779148!
isEmpty
	
	^ contents isEmpty.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 14:48:29'!
PASSED!

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 14:48:29'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:55:30'!
test03CartWithProductsContainsProducts
	
	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	cart add: aBook.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:56:09' prior: 50779162!
test03CartWithProductsContainsProducts
	
	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	cart add: aBook.
	
	self assert: (cart contains: aBook).! !

!testRun: #CartTest #test03CartWithProductsContainsProducts stamp: 'dr 10/31/2019 14:56:14'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:56:21'!
contains: aBook 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:56:49' prior: 50779181!
contains: aBook 
	
	^ true.! !

!testRun: #CartTest #test03CartWithProductsContainsProducts stamp: 'dr 10/31/2019 14:56:53'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 14:56:53'!
PASSED!

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 14:56:53'!
PASSED!

!testRun: #CartTest #test03CartWithProductsContainsProducts stamp: 'dr 10/31/2019 14:56:53'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:58:12'!
test04CartWithAProductDoesNotContainOtherProducts
	
	| cart aBook anotherBook |
	cart := Cart new.
	aBook := Book new.
	cart add: aBook.
	anotherBook := Book new.
	
	self assert: (cart contains: aBook).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:58:20' prior: 50779202!
test04CartWithAProductDoesNotContainOtherProducts
	
	| cart aBook anotherBook |
	cart := Cart new.
	aBook := Book new.
	cart add: aBook.
	anotherBook := Book new.
	
	self assert: (cart contains: anotherBook).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:58:27' prior: 50779212!
test04CartWithAProductDoesNotContainOtherProducts
	
	| cart aBook anotherBook |
	cart := Cart new.
	aBook := Book new.
	cart add: aBook.
	anotherBook := Book new.
	
	self deny: (cart contains: anotherBook).! !

!testRun: #CartTest #test04CartWithAProductDoesNotContainOtherProducts stamp: 'dr 10/31/2019 14:58:29'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 14:58:51' prior: 50779186!
contains: aBook 
	
	^ contents includes: aBook .! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 14:58:53'!
PASSED!

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 14:58:53'!
PASSED!

!testRun: #CartTest #test03CartWithProductsContainsProducts stamp: 'dr 10/31/2019 14:58:53'!
PASSED!

!testRun: #CartTest #test04CartWithAProductDoesNotContainOtherProducts stamp: 'dr 10/31/2019 14:58:53'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:02:44' prior: 50779123!
test02CartWithProductIsNotEmpty

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	cart add: 1 of: aBook .
	
	self deny: cart isEmpty.! !

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 15:02:48'!
ERROR!

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 15:02:57'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:03:04'!
add: aSmallInteger of: aBook 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:04:22' prior: 50779265!
add: aQuantity of: aBook 
	
	contents add: #(aBook,aQuantity).
	! !

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 15:04:45'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:05:56' prior: 50779143!
initialize

	contents := Dictionary new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:07:24' prior: 50779278!
initialize

	contents := Dictionary new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:07:54' prior: 50779270!
add: aQuantity of: aBook 
	
	contents add: (Association key: aBook value: aQuantity).
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:08:36' prior: 50779235!
contains: aBook 
	
	^ contents includesKey: aBook .! !

!methodRemoval: Cart #add: stamp: 'dr 10/31/2019 15:09:01'!
add: aBook

	^ contents add: aBook.!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:09:24' prior: 50779170!
test03CartWithProductsContainsProducts
	
	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	cart add: 1 of: aBook .
	
	self assert: (cart contains: aBook).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:09:31' prior: 50779222!
test04CartWithAProductDoesNotContainOtherProducts
	
	| cart aBook anotherBook |
	cart := Cart new.
	aBook := Book new.
	cart add: 1 of: aBook.
	anotherBook := Book new.
	
	self deny: (cart contains: anotherBook).! !

!testRun: #CartTest #test04CartWithAProductDoesNotContainOtherProducts stamp: 'dr 10/31/2019 15:09:37'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 15:09:37'!
PASSED!

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 15:09:37'!
PASSED!

!testRun: #CartTest #test03CartWithProductsContainsProducts stamp: 'dr 10/31/2019 15:09:37'!
PASSED!

!testRun: #CartTest #test04CartWithAProductDoesNotContainOtherProducts stamp: 'dr 10/31/2019 15:09:37'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:14:08'!
test05CannotAddNegativeAmountOfABookToCart

	| cart aBook anotherBook |
	cart := Cart new.
	aBook := Book new.
	cart add: 1 of: aBook.
	anotherBook := Book new.
	
	self deny: (cart contains: anotherBook).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:17:18' prior: 50779336!
test05CannotAddNegativeAmountOfABookToCart

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	self should: [ cart add: -1 of: aBook. ]
		 raise: Error
		withMessageText: Cart cannotAddNegativeAmountOfBooksMessageError.
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:18:43' prior: 50779346!
test05CannotAddNegativeAmountOfABookToCart

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	self should: [ cart add: -1 of: aBook. ]
		 raise: Error
		withMessageText: Cart cannotAddNegativeAmountOfBooksMessageError.
	
	self deny: (cart contains: aBook )! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:18:57' prior: 50779357!
test05CannotAddNegativeAmountOfABookToCart

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	self should: [ cart add: -1 of: aBook. ]
		 raise: Error
		withMessageText: Cart cannotAddNegativeAmountOfBooksMessageError.
	
	self deny: (cart contains: aBook)! !

!testRun: #CartTest #test05CannotAddNegativeAmountOfABookToCart stamp: 'dr 10/31/2019 15:19:17'!
ERROR!
!Cart class methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:19:32'!
cannotAddNegativeAmountOfBooksMessageError
	self shouldBeImplemented.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:19:58' prior: 50779384!
cannotAddNegativeAmountOfBooksMessageError
	
	^ 'You cannot add negative amount of that book'! !

!testRun: #CartTest #test05CannotAddNegativeAmountOfABookToCart stamp: 'dr 10/31/2019 15:20:03'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:21:50'!
test05CannotAddNotPositiveAmountOfABookToCart

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	self should: [ cart add: 0 of: aBook. ]
		 raise: Error
		withMessageText: Cart cannotAddNegativeAmountOfBooksMessageError.
	
	self deny: (cart contains: aBook)! !

!testRun: #CartTest #test05CannotAddNotPositiveAmountOfABookToCart stamp: 'dr 10/31/2019 15:21:52'!
FAILURE!

!methodRemoval: CartTest #test05CannotAddNegativeAmountOfABookToCart stamp: 'dr 10/31/2019 15:22:01'!
test05CannotAddNegativeAmountOfABookToCart

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	self should: [ cart add: -1 of: aBook. ]
		 raise: Error
		withMessageText: Cart cannotAddNegativeAmountOfBooksMessageError.
	
	self deny: (cart contains: aBook)!
!Cart class methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:22:29'!
cannotAddNotPositiveAmountOfBooksMessageError
	
	^ 'You cannot add negative amount of that book'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:22:29' prior: 50779399!
test05CannotAddNotPositiveAmountOfABookToCart

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	self should: [ cart add: 0 of: aBook. ]
		 raise: Error
		withMessageText: Cart cannotAddNotPositiveAmountOfBooksMessageError.
	
	self deny: (cart contains: aBook)! !

!methodRemoval: Cart class #cannotAddNegativeAmountOfBooksMessageError stamp: 'dr 10/31/2019 15:22:29'!
cannotAddNegativeAmountOfBooksMessageError
	
	^ 'You cannot add negative amount of that book'!
!Cart class methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:22:50' prior: 50779425!
cannotAddNotPositiveAmountOfBooksMessageError
	
	^ 'You cannot add not positive amount of that book'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:23:48' prior: 50779288!
add: aQuantity of: aBook 

	self assertIfNotPositive: aBook.	
	contents add: (Association key: aBook value: aQuantity).
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:23:57' prior: 50779457!
add: aQuantity of: aBook 

	self assertIfNotPositive: aQuantity.	
	contents add: (Association key: aBook value: aQuantity).
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:25:16'!
assertIfNotPositive: aQuantity.	
	
	aQuantity <= 0 ifTrue: [ self error: self class cannotAddNotPositiveAmountOfBooksMessageError. ].! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 15:25:22'!
PASSED!

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 15:25:22'!
PASSED!

!testRun: #CartTest #test03CartWithProductsContainsProducts stamp: 'dr 10/31/2019 15:25:22'!
PASSED!

!testRun: #CartTest #test04CartWithAProductDoesNotContainOtherProducts stamp: 'dr 10/31/2019 15:25:22'!
PASSED!

!testRun: #CartTest #test05CannotAddNotPositiveAmountOfABookToCart stamp: 'dr 10/31/2019 15:25:22'!
PASSED!

!methodRemoval: CartTest #test05CannotAddNotPositiveAmountOfABookToCart stamp: 'dr 10/31/2019 15:29:05'!
test05CannotAddNotPositiveAmountOfABookToCart

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	self should: [ cart add: 0 of: aBook. ]
		 raise: Error
		withMessageText: Cart cannotAddNotPositiveAmountOfBooksMessageError.
	
	self deny: (cart contains: aBook)!

!testRun: #CartTest #test04CartWithAProductDoesNotContainOtherProducts stamp: 'dr 10/31/2019 15:29:40'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:30:06'!
test05CannotAddNotPositiveAmountOfABookToCart
	self fail."
	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	self should: [ cart add: 0 of: aBook. ]
		 raise: Error
		withMessageText: Cart cannotAddNotPositiveAmountOfBooksMessageError.
	
	self deny: (cart contains: aBook)"! !

!testRun: #CartTest #test05CannotAddNotPositiveAmountOfABookToCart stamp: 'dr 10/31/2019 15:30:08'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:30:17' prior: 50779509!
test05CannotAddNotPositiveAmountOfABookToCart

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	self should: [ cart add: 0 of: aBook. ]
		 raise: Error
		withMessageText: Cart cannotAddNotPositiveAmountOfBooksMessageError.
	
	self deny: (cart contains: aBook)! !

!testRun: #CartTest #test05CannotAddNotPositiveAmountOfABookToCart stamp: 'dr 10/31/2019 15:30:18'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 15:30:18'!
PASSED!

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 15:30:18'!
PASSED!

!testRun: #CartTest #test03CartWithProductsContainsProducts stamp: 'dr 10/31/2019 15:30:18'!
PASSED!

!testRun: #CartTest #test04CartWithAProductDoesNotContainOtherProducts stamp: 'dr 10/31/2019 15:30:18'!
PASSED!

!testRun: #CartTest #test05CannotAddNotPositiveAmountOfABookToCart stamp: 'dr 10/31/2019 15:30:18'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:34:02'!
test06AmountOfAddedBookIsCorrect

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	self should: [ cart add: 0 of: aBook. ]
		 raise: Error
		withMessageText: Cart cannotAddNotPositiveAmountOfBooksMessageError.
	
	self deny: (cart contains: aBook)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:35:23' prior: 50779556!
test06AmountOfAddedBookIsCorrect

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	cart add: 1 of: aBook.
	
	self assert: (cart amountOf: aBook)  equals: 0.! !

!testRun: #CartTest #test06AmountOfAddedBookIsCorrect stamp: 'dr 10/31/2019 15:35:27'!
ERROR!

!testRun: #CartTest #test06AmountOfAddedBookIsCorrect stamp: 'dr 10/31/2019 15:35:32'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:35:37'!
amountOf: aBook 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:36:26' prior: 50779581!
amountOf: aBook 
	
	^ contents at: aBook.! !

!testRun: #CartTest #test06AmountOfAddedBookIsCorrect stamp: 'dr 10/31/2019 15:36:38'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:36:46' prior: 50779567!
test06AmountOfAddedBookIsCorrect

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	cart add: 1 of: aBook.
	
	self assert: (cart amountOf: aBook)  equals: 1.! !

!testRun: #CartTest #test06AmountOfAddedBookIsCorrect stamp: 'dr 10/31/2019 15:36:47'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 15:36:47'!
PASSED!

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 15:36:47'!
PASSED!

!testRun: #CartTest #test03CartWithProductsContainsProducts stamp: 'dr 10/31/2019 15:36:47'!
PASSED!

!testRun: #CartTest #test04CartWithAProductDoesNotContainOtherProducts stamp: 'dr 10/31/2019 15:36:47'!
PASSED!

!testRun: #CartTest #test05CannotAddNotPositiveAmountOfABookToCart stamp: 'dr 10/31/2019 15:36:47'!
PASSED!

!testRun: #CartTest #test06AmountOfAddedBookIsCorrect stamp: 'dr 10/31/2019 15:36:47'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:37:06'!
test07AmountOfNotAddedBookIsZero

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	cart add: 1 of: aBook.
	
	self assert: (cart amountOf: aBook)  equals: 1.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:37:20' prior: 50779624!
test07AmountOfNotAddedBookIsZero

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	self assert: (cart amountOf: aBook)  equals: 0.! !

!testRun: #CartTest #test07AmountOfNotAddedBookIsZero stamp: 'dr 10/31/2019 15:37:21'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:37:59' prior: 50779586!
amountOf: aBook 
	
	^ contents at: aBook ifAbsent: [ ^ 0. ].! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 15:38:01'!
PASSED!

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 15:38:01'!
PASSED!

!testRun: #CartTest #test03CartWithProductsContainsProducts stamp: 'dr 10/31/2019 15:38:01'!
PASSED!

!testRun: #CartTest #test04CartWithAProductDoesNotContainOtherProducts stamp: 'dr 10/31/2019 15:38:01'!
PASSED!

!testRun: #CartTest #test05CannotAddNotPositiveAmountOfABookToCart stamp: 'dr 10/31/2019 15:38:01'!
PASSED!

!testRun: #CartTest #test06AmountOfAddedBookIsCorrect stamp: 'dr 10/31/2019 15:38:01'!
PASSED!

!testRun: #CartTest #test07AmountOfNotAddedBookIsZero stamp: 'dr 10/31/2019 15:38:01'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:39:13'!
test08AmountOfAnAddedBookIsIncreasedIfAddedAgain

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
		
	self assert: (cart amountOf: aBook)  equals: 0.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:39:48' prior: 50779671!
test08AmountOfAnAddedBookIsIncreasedIfAddedAgain

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	cart add: 1 of: aBook.
	cart add: 1 of: aBook.
		
	self assert: (cart amountOf: aBook)  equals: 2.! !

!testRun: #CartTest #test08AmountOfAnAddedBookIsIncreasedIfAddedAgain stamp: 'dr 10/31/2019 15:41:02'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:44:09' prior: 50779464!
add: aQuantity of: aBook 

	| previousAmount |
	self assertIfNotPositive: aQuantity.	
	previousAmount := contents at: aBook ifAbsent: [ 0 ].
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:45:06' prior: 50779692!
add: aQuantity of: aBook 

	| previousAmount |
	self assertIfNotPositive: aQuantity.	
	previousAmount := contents at: aBook ifAbsent: [ 0 ].
	
	contents at: aBook put: previousAmount + aQuantity .! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 15:45:07'!
PASSED!

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 15:45:07'!
PASSED!

!testRun: #CartTest #test03CartWithProductsContainsProducts stamp: 'dr 10/31/2019 15:45:07'!
PASSED!

!testRun: #CartTest #test04CartWithAProductDoesNotContainOtherProducts stamp: 'dr 10/31/2019 15:45:07'!
PASSED!

!testRun: #CartTest #test05CannotAddNotPositiveAmountOfABookToCart stamp: 'dr 10/31/2019 15:45:07'!
PASSED!

!testRun: #CartTest #test06AmountOfAddedBookIsCorrect stamp: 'dr 10/31/2019 15:45:07'!
PASSED!

!testRun: #CartTest #test07AmountOfNotAddedBookIsZero stamp: 'dr 10/31/2019 15:45:07'!
PASSED!

!testRun: #CartTest #test08AmountOfAnAddedBookIsIncreasedIfAddedAgain stamp: 'dr 10/31/2019 15:45:07'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:49:27'!
test09EmptyCartHasEmptyListCart

	| cart |
	cart := Cart new.
	
	self assert: (cart listCart isEmpty).! !

!testRun: #CartTest #test09EmptyCartHasEmptyListCart stamp: 'dr 10/31/2019 15:49:34'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:49:39'!
listCart
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:50:00' prior: 50779743!
listCart
	
	^ contents.! !

!testRun: #CartTest #test09EmptyCartHasEmptyListCart stamp: 'dr 10/31/2019 15:50:08'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:51:11' prior: 50779747!
listCart
	
	^ OrderedCollection new.! !

!testRun: #CartTest #test09EmptyCartHasEmptyListCart stamp: 'dr 10/31/2019 15:51:20'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:52:14'!
test10CartWithBooksHasBooksInListCart

	| cart aBook |
	cart := Cart new.
	aBook := Book new.
	
	Cart add: 1 of: aBook.
	
	self assert: (cart listCart isEmpty).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:52:23' prior: 50779761!
test10CartWithBooksHasBooksInListCart

	| cart aBook |
	
	cart := Cart new.
	aBook := Book new.
	
	Cart add: 1 of: aBook.
	
	self assert: (cart listCart isEmpty).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:53:09' prior: 50779770!
test10CartWithBooksHasBooksInListCart

	| cart aBook |
	
	cart := Cart new.
	aBook := Book new.
	
	Cart add: 1 of: aBook.
	
	self assert: (cart listCart includesKey: aBook).! !

!testRun: #CartTest #test10CartWithBooksHasBooksInListCart stamp: 'dr 10/31/2019 15:53:12'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:53:26' prior: 50779779!
test10CartWithBooksHasBooksInListCart

	| cart aBook |
	
	cart := Cart new.
	aBook := Book new.
	
	cart add: 1 of: aBook.
	
	self assert: (cart listCart includesKey: aBook).! !

!testRun: #CartTest #test10CartWithBooksHasBooksInListCart stamp: 'dr 10/31/2019 15:53:27'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:53:43' prior: 50779754!
listCart
	
	^ contents.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:54:21'!
test10CartWithBooksHasBooksAndItsQuantityInListCart

	| cart aBook |
	
	cart := Cart new.
	aBook := Book new.
	
	cart add: 1 of: aBook.
	
	self assert: (cart listCart includesKey: aBook).! !

!methodRemoval: CartTest #test10CartWithBooksHasBooksInListCart stamp: 'dr 10/31/2019 15:54:21'!
test10CartWithBooksHasBooksInListCart

	| cart aBook |
	
	cart := Cart new.
	aBook := Book new.
	
	cart add: 1 of: aBook.
	
	self assert: (cart listCart includesKey: aBook).!
!CartTest methodsFor: 'as yet unclassified' stamp: 'dr 10/31/2019 15:55:00' prior: 50779807!
test10CartWithBooksHasBooksAndItsQuantityInListCart

	| cart aBook |
	
	cart := Cart new.
	aBook := Book new.
	
	cart add: 1 of: aBook.
	
	self assert: (cart listCart includesKey: aBook).
	self assert: (cart listCart at: aBook) equals: 1.
	self assert: (cart listCart size) equals: 1.! !

!testRun: #CartTest #test10CartWithBooksHasBooksAndItsQuantityInListCart stamp: 'dr 10/31/2019 15:55:01'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'dr 10/31/2019 15:55:01'!
PASSED!

!testRun: #CartTest #test02CartWithProductIsNotEmpty stamp: 'dr 10/31/2019 15:55:01'!
PASSED!

!testRun: #CartTest #test03CartWithProductsContainsProducts stamp: 'dr 10/31/2019 15:55:01'!
PASSED!

!testRun: #CartTest #test04CartWithAProductDoesNotContainOtherProducts stamp: 'dr 10/31/2019 15:55:02'!
PASSED!

!testRun: #CartTest #test05CannotAddNotPositiveAmountOfABookToCart stamp: 'dr 10/31/2019 15:55:02'!
PASSED!

!testRun: #CartTest #test06AmountOfAddedBookIsCorrect stamp: 'dr 10/31/2019 15:55:02'!
PASSED!

!testRun: #CartTest #test07AmountOfNotAddedBookIsZero stamp: 'dr 10/31/2019 15:55:02'!
PASSED!

!testRun: #CartTest #test08AmountOfAnAddedBookIsIncreasedIfAddedAgain stamp: 'dr 10/31/2019 15:55:02'!
PASSED!

!testRun: #CartTest #test09EmptyCartHasEmptyListCart stamp: 'dr 10/31/2019 15:55:02'!
PASSED!

!testRun: #CartTest #test10CartWithBooksHasBooksAndItsQuantityInListCart stamp: 'dr 10/31/2019 15:55:02'!
PASSED!

----SNAPSHOT----(31 October 2019 16:16:29) CuisUniversity-3938.image priorSource: 14317226!

----QUIT----(31 October 2019 16:16:35) CuisUniversity-3938.image priorSource: 14343083!

----STARTUP---- (31 October 2019 19:04:48) as /home/drenteria/Documentos/isI/isw1/linux64/CuisUniversity-3938.image!


----End fileIn of /home/drenteria/Documentos/isI/isw1/21- MarsRover/MarsRover.st----!

----SNAPSHOT----(31 October 2019 20:52:21) CuisUniversity-3938.image priorSource: 14343176!

----QUIT----(31 October 2019 20:52:25) CuisUniversity-3938.image priorSource: 14356123!

----STARTUP---- (2 November 2019 16:11:52) as /home/dago/Documents/Facultad/isw1/isw1/linux64/CuisUniversity-3938.image!


!classRemoval: #Cart stamp: 'sjd 11/2/2019 16:12:28'!
Object subclass: #Cart
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Book stamp: 'sjd 11/2/2019 16:12:29'!
Object subclass: #Book
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'sjd 11/2/2019 16:12:29'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/dago/Documents/Facultad/isw1/isw1/25- TusLibros/2/TusLibros-18.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'sjd 11/2/2019 16:21:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'sjd 11/2/2019 16:26:45'!
test01! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:37:26'!
test01EmptyCartHasTotalCostOfZero! !

!methodRemoval: CashierTest #test01 stamp: 'sjd 11/2/2019 16:37:26'!
test01!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:37:31' prior: 50780505!
test01EmptyCartHasTotalCostOfZero

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:37:47' prior: 50780512!
test01EmptyCartHasTotalCostOfZero

	| cart |
	cart := Cart new! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:38:51' prior: 50780517!
test01EmptyCartHasTotalCostOfZero

	| cart |
	cart := Cart acceptingItemsOf: #('validItem1','validItem2')! !

!classDefinition: #Cashier category: #TusLibros stamp: 'sjd 11/2/2019 16:39:51'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:39:42' prior: 50780523!
test01EmptyCartHasTotalCostOfZero

	| aCart cashier |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	
	cashier := Cashier new.
	cashier totalCostOf: aCart.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:40:20' prior: 50780536!
test01EmptyCartHasTotalCostOfZero

	| aCart cashier |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	
	cashier := Cashier new.
	self assert: (cashier totalCostOf: aCart) equals: 0.! !

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 16:40:23'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:40:30'!
totalCostOf: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:40:43' prior: 50780557!
totalCostOf: aCart 
	
	^ 0.! !

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 16:40:47'!
PASSED!

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 16:40:47'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:41:26'!
test02CartWithValidItemHasTotalCostOfThatItem

	| aCart cashier |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	
	cashier := Cashier new.
	self assert: (cashier totalCostOf: aCart) equals: 0.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:45:00' prior: 50780572!
test02CartWithValidItemHasTotalCostOfThatItem

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	aCart add: 'validItem1'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem1' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList.
	self assert: (cashier totalCostOf: aCart) equals: 0.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:45:48' prior: 50780582!
test02CartWithValidItemHasTotalCostOfThatItem

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	aCart add: 'validItem1'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem1' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList.
	self assert: (cashier totalCostOf: aCart) equals: 5.! !

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 16:45:50'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:45:59'!
withPriceList: aDictionary 
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:47:34' prior: 50780615!
withPriceList: aPriceList
	
	^ self new initializeWithPriceList: aPriceList.! !

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 16:47:39'!
ERROR!

!classDefinition: #Cashier category: #TusLibros stamp: 'sjd 11/2/2019 16:47:56'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'sjd 11/2/2019 16:47:56'!
initializeWithPriceList: aPriceList 
	self shouldBeImplemented.
	priceList := aPriceList.! !
!Cashier methodsFor: 'initialization' stamp: 'sjd 11/2/2019 16:48:09' prior: 50780635!
initializeWithPriceList: aPriceList 
	
	priceList := aPriceList.! !

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 16:48:31'!
FAILURE!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 16:48:31'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:53:30' prior: 50780562!
totalCostOf: aCart 
	
	aCart forEachItemDo: [ :anItem | self priceFor: anItem ].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 16:57:39' prior: 50780654!
totalCostOf: aCart 
	
	
	aCart forEachItemDo: [ :anItem | self register: anItem ].! !

!classDefinition: #Cashier category: #TusLibros stamp: 'sjd 11/2/2019 17:01:30'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:01:28'!
registerItemsOf: aCart 
	
	total := 0 peso.
	aCart forEachItemDo: [ :anItem | self register: anItem ].
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:01:43' prior: 50780672!
registerItemsOf: aCart 
	
	total := 0 peso.
	aCart forEachItemDo: [ :anItem | self register: anItem ].
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:13:21' prior: 50780597!
test02CartWithValidItemHasTotalCostOfThatItem

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	aCart add: 'validItem1'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem1' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	self assert: (cashier totalCostOf: aCart) equals: 5.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:14:14' prior: 50780545!
test01EmptyCartHasTotalCostOfZero

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	
	aPriceList := Dictionary new.
		
	cashier := Cashier withPriceList: aPriceList for: aCart.
	self assert: (cashier totalCost) equals: 0.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:14:27' prior: 50780686!
test02CartWithValidItemHasTotalCostOfThatItem

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	aCart add: 'validItem1'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem1' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	self assert: (cashier totalCost) equals: 5.! !

!classDefinition: #Cashier category: #TusLibros stamp: 'sjd 11/2/2019 17:15:03'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList total cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:15:00'!
totalCost
	
	
	cart forEachItemDo: [ :anItem | self register: anItem ].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:15:09' prior: 50780735!
totalCost
	
	cart forEachItemDo: [ :anItem | self register: anItem ].! !

!methodRemoval: Cashier #totalCostOf: stamp: 'sjd 11/2/2019 17:15:15'!
totalCostOf: aCart 
	
	
	aCart forEachItemDo: [ :anItem | self register: anItem ].!
!Cashier methodsFor: 'initialization' stamp: 'sjd 11/2/2019 17:15:35'!
initializeWithPriceList: aPriceList for: aCart
	
	priceList := aPriceList.
	cart := aCart.! !

!methodRemoval: Cashier #initializeWithPriceList: stamp: 'sjd 11/2/2019 17:15:41'!
initializeWithPriceList: aPriceList 
	
	priceList := aPriceList.!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:16:10'!
withPriceList: aPriceList for: aCart
	
	^ self new initializeWithPriceList: aPriceList for: aCart.! !

!methodRemoval: Cashier class #withPriceList: stamp: 'sjd 11/2/2019 17:16:12'!
withPriceList: aPriceList
	
	^ self new initializeWithPriceList: aPriceList.!
!Cashier methodsFor: 'initialization' stamp: 'sjd 11/2/2019 17:17:20' prior: 50780751!
initializeWithPriceList: aPriceList for: aCart
	
	priceList := aPriceList.
	self registerItemsOf: aCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:17:34' prior: 50780679!
registerItemsOf: aCart 
	
	total := 0 * peso.
	aCart forEachItemDo: [ :anItem | self register: anItem ].
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:19:24'!
register: anItem 

	priceList at: anItem ifAbsent: [self error: self class ItemNotValidErrorMessage ].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:19:34' prior: 50780786!
register: anItem 

	priceList at: anItem ifAbsent: [ self error: self class itemNotValidErrorMessage ].! !

| dict |
dict := Dictionary new.
dict add: (Association key: 3 value: 0 * peso).
dict at: 3 ifAbsent: [ self error: 'banana' ].!

| dict |
dict := Dictionary new.
dict add: (Association key: 4 value: 0 * peso).
dict at: 3 ifAbsent: [ self error: 'banana' ].!
!Cashier class methodsFor: 'error messages' stamp: 'sjd 11/2/2019 17:30:40'!
itemNotValidErrorMessageFor: anItem

	^ anItem printString, ' is not registered in the price list'! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:31:17' prior: 50780793!
register: anItem 

	priceList at: anItem ifAbsent: [ self error: (self class itemNotValidErrorMessageFor: anItem) ].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:31:49' prior: 50780814!
register: anItem 

	total := total + priceList at: anItem ifAbsent: [ self error: (self class itemNotValidErrorMessageFor: anItem) ].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:32:04' prior: 50780821!
register: anItem 

	total := total + (priceList at: anItem ifAbsent: [ self error: (self class itemNotValidErrorMessageFor: anItem) ]).! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:32:32'!
priceFor: anItem

	^ priceList at: anItem ifAbsent: [ self error: (self class itemNotValidErrorMessageFor: anItem) ].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:32:56' prior: 50780829!
register: anItem 

	total := total + (self priceFor: anItem).! !

| dict tot |
tot := 1.
dict := Dictionary new.
dict add: (Association key: 4 value: 0 * peso).
tot := tot + (dict at: 4 ifAbsent: [ self error: 'banana' ]).

tot!

| dict tot |
tot := 1.
dict := Dictionary new.
dict add: (Association key: 4 value: 2 * peso).
tot := tot + (dict at: 4 ifAbsent: [ self error: 'banana' ]).

tot!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 17:34:28'!
ERROR!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 17:34:28'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'sjd 11/2/2019 17:34:42'!
forEachItemDo: aBlockClosure 
	self shouldBeImplemented.! !
!Cart methodsFor: 'accessing' stamp: 'sjd 11/2/2019 17:35:48' prior: 50780865!
forEachItemDo: aClosureToRun 
	
	items do: aClosureToRun.! !

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 17:35:55'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:36:24' prior: 50780741!
totalCost
	
	total.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:36:29' prior: 50780879!
totalCost
	
	^ total.! !

Object subclass: #Cashier
	instanceVariableNames: 'priceList total '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'sjd 11/2/2019 17:36:39'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:37:12' prior: 50780780!
registerItemsOf: aCart 
	
	aCart forEachItemDo: [ :anItem | self register: anItem ].
	! !
!Cashier methodsFor: 'initialization' stamp: 'sjd 11/2/2019 17:37:24' prior: 50780773!
initializeWithPriceList: aPriceList for: aCart
	
	priceList := aPriceList.
	total := 0 * peso.
	self registerItemsOf: aCart.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sjd 11/2/2019 17:37:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sjd 11/2/2019 17:37:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sjd 11/2/2019 17:37:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sjd 11/2/2019 17:37:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sjd 11/2/2019 17:37:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sjd 11/2/2019 17:37:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sjd 11/2/2019 17:37:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sjd 11/2/2019 17:37:27'!
PASSED!

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 17:37:27'!
PASSED!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 17:37:27'!
FAILURE!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 17:37:27'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:37:42' prior: 50780713!
test02CartWithValidItemHasTotalCostOfThatItem

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	aCart add: 'validItem1'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem1' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	self assert: (cashier totalCost) equals: 5 * peso.! !

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 17:37:47'!
PASSED!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 17:37:49'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:38:21' prior: 50780836!
priceFor: anItem

	^ priceList at: anItem "ifAbsent: [ self error: (self class itemNotValidErrorMessageFor: anItem) ]".! !

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 17:38:24'!
PASSED!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 17:38:24'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:39:08'!
test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	aCart add: 'validItem1'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem1' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	self assert: (cashier totalCost) equals: 5 * peso.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:42:21' prior: 50780982!
test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	aCart add: 'invalidItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	self should: [Cashier withPriceList: aPriceList for: aCart. ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier itemNotValidErrorMessageFor: 'invalidItem')
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:42:40' prior: 50780998!
test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	aCart add: 'invalidItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	self should: [cashier := Cashier withPriceList: aPriceList for: aCart. ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier itemNotValidErrorMessageFor: 'invalidItem')
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:43:11' prior: 50781016!
test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	aCart add: 'invalidItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	self should: [cashier := Cashier withPriceList: aPriceList for: aCart. ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier itemNotValidErrorMessageFor: 'invalidItem').
	
	self assert: cashier isNil.! !

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 17:43:15'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:44:06' prior: 50780969!
priceFor: anItem

	^ priceList at: anItem ifAbsent: [ self error: (self class itemNotValidErrorMessageFor: anItem) ].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sjd 11/2/2019 17:44:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sjd 11/2/2019 17:44:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sjd 11/2/2019 17:44:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sjd 11/2/2019 17:44:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sjd 11/2/2019 17:44:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sjd 11/2/2019 17:44:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sjd 11/2/2019 17:44:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sjd 11/2/2019 17:44:10'!
PASSED!

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 17:44:10'!
PASSED!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 17:44:10'!
PASSED!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 17:44:10'!
ERROR!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 17:44:10'!
ERROR!

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 17:44:17'!
PASSED!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 17:44:17'!
PASSED!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 17:44:17'!
ERROR!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 17:44:17'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:44:48' prior: 50781034!
test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem','validItem2').
	aCart add: 'invalidItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	self should: [cashier := Cashier withPriceList: aPriceList for: aCart. ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier itemNotValidErrorMessageFor: 'invalidItem').
	
	self assert: cashier isNil.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:44:56' prior: 50781119!
test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem').
	aCart add: 'invalidItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	self should: [cashier := Cashier withPriceList: aPriceList for: aCart. ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier itemNotValidErrorMessageFor: 'invalidItem').
	
	self assert: cashier isNil.! !

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 17:44:58'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:45:42' prior: 50781138!
test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('invalidItem').
	aCart add: 'invalidItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	self should: [cashier := Cashier withPriceList: aPriceList for: aCart. ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier itemNotValidErrorMessageFor: 'invalidItem').
	
	self assert: cashier isNil.! !

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 17:45:43'!
PASSED!

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 17:45:43'!
PASSED!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 17:45:43'!
PASSED!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 17:45:43'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:49:49'!
test04CheckOutForAnExpiredCreditCardRaiseError

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('invalidItem').
	aCart add: 'invalidItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	self should: [cashier := Cashier withPriceList: aPriceList for: aCart. ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier itemNotValidErrorMessageFor: 'invalidItem').
	
	self assert: cashier isNil.! !

March ofYear: 2020.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:58:23' prior: 50781194!
test04CheckOutForAnExpiredCreditCardRaiseError

	| aCart cashier aPriceList aCreditCardNumber anExpirationDate anOwner |
	aCart := Cart acceptingItemsOf: #('validItem').
	aCart add: 'validItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	
	aCreditCardNumber := 1111222233334444.
	anExpirationDate := March ofYear: 2020.
	anOwner := 'Dago de Renteria'
	
	self should: [ cashier checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier itemNotValidErrorMessageFor: 'invalidItem').
	
	self assert: cashier isNil.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:58:48' prior: 50781213!
test04CheckOutForAnExpiredCreditCardRaiseError

	| aCart cashier aPriceList aCreditCardNumber anExpirationDate anOwner |
	aCart := Cart acceptingItemsOf: #('validItem').
	aCart add: 'validItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	
	aCreditCardNumber := 1111222233334444.
	anExpirationDate := March ofYear: 2020.
	anOwner := 'Dago de Renteria'.
	
	self should: [ cashier checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier itemNotValidErrorMessageFor: 'invalidItem').
	
	self assert: cashier isNil.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 17:59:40' prior: 50781239!
test04CheckOutForAnExpiredCreditCardRaiseError

	| aCart cashier aPriceList aCreditCardNumber anExpirationDate anOwner |
	aCart := Cart acceptingItemsOf: #('validItem').
	aCart add: 'validItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	
	aCreditCardNumber := 1111222233334444.
	anExpirationDate := March ofYear: 2020.
	anOwner := 'Dago de Renteria'.
	
	self should: [ cashier checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier expiratedCreditCardErrorMessage).
	
	self assert: cashier isNil.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 18:00:06' prior: 50781265!
test04CheckOutForAnExpiredCreditCardRaiseError

	| aCart cashier aPriceList aCreditCardNumber anExpirationDate anOwner |
	aCart := Cart acceptingItemsOf: #('validItem').
	aCart add: 'validItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	
	aCreditCardNumber := 1111222233334444.
	anExpirationDate := March ofYear: 2020.
	anOwner := 'Dago de Renteria'.
	
	self should: [ cashier checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier expiratedCreditCardErrorMessage).
	
	"invariante no quedo como pagado que hacemos aca?"! !

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 18:00:30'!
ERROR!
!Cashier class methodsFor: 'error messages' stamp: 'sjd 11/2/2019 18:00:50'!
expiratedCreditCardErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'sjd 11/2/2019 18:01:51' prior: 50781321!
expiratedCreditCardErrorMessage
	
	^ 'Expirated credit card. Please verify your information or try with another credit card'! !

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 18:02:08'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 18:02:15'!
checkOutFor: aSmallInteger withExpirationDate: aGregorianMonthOfYear withOwner: aString 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 18:05:03' prior: 50781336!
checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner

	self assertCreditCardNotExpiredFor: anExpirationDate.
	
	! !

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 18:05:10'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 18:05:15'!
assertCreditCardNotExpiredFor: aGregorianMonthOfYear 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 18:08:21' prior: 50781354!
assertCreditCardNotExpiredFor: aDateOfExpiration

	aDateOfExpiration 
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 18:08:32' prior: 50781360!
assertCreditCardNotExpiredFor: anExpirationDate

	anExpirationDate 
	! !

Date date.!

Time date.!

Date now.!

Date current.!

March ofYear: 2020 < Date current. !

March ofYear: 2020!

March ofYear: 2020 < GregorianMonthOfYear current.!

GregorianMonthOfYear current.!

(March ofYear: 2020) < (GregorianMonthOfYear current).!

(March ofYear: 2020) < (GregorianMonthOfYear current).!

GregorianMonthOfYear current!

(GregorianMonthOfYear current) < (March ofYear: 2020).!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 18:15:09' prior: 50781366!
assertCreditCardNotExpiredFor: anExpirationDate

	anExpirationDate < (GregorianMonthOfYear current) ifFalse: [self error: self class expiratedCreditCardErrorMessage ].
	! !

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 18:15:29'!
ERROR!

aGregorianMonth year!

aGregorianMonth year!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 18:18:31' prior: 50781291!
test04CheckOutForAnExpiredCreditCardRaiseError

	| aCart cashier aPriceList aCreditCardNumber anExpirationDate anOwner |
	aCart := Cart acceptingItemsOf: #('validItem').
	aCart add: 'validItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	
	aCreditCardNumber := 1111222233334444.
	anExpirationDate := March ofYear: (Year yearNumber: 2020).
	anOwner := 'Dago de Renteria'.
	
	self should: [ cashier checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier expiratedCreditCardErrorMessage).
	
	"invariante no quedo como pagado que hacemos aca?"! !

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 18:18:33'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 18:21:16' prior: 50781398!
test04CheckOutForAnExpiredCreditCardRaiseError

	| aCart cashier aPriceList aCreditCardNumber anExpirationDate anOwner |
	aCart := Cart acceptingItemsOf: #('validItem').
	aCart add: 'validItem'.

	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	
	aCreditCardNumber := 1111222233334444.
	anExpirationDate := March ofYear: (GregorianYear number: 2020).
	anOwner := 'Dago de Renteria'.
	
	self should: [ cashier checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier expiratedCreditCardErrorMessage).
	
	"invariante no quedo como pagado que hacemos aca?"! !

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 18:21:18'!
PASSED!

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 18:21:18'!
PASSED!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 18:21:18'!
PASSED!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 18:21:18'!
PASSED!

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 18:21:18'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 19:36:02'!
test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength

	| aCart cashier aPriceList aCreditCardNumber anExpirationDate anOwner |
	aCart := Cart acceptingItemsOf: #('validItem').
	aCart add: 'validItem'.

	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	
	aCreditCardNumber := 11112222333344444.
	anExpirationDate := March ofYear: (GregorianYear number: 2020).
	anOwner := 'Dago de Renteria'.
	
	self should: [ cashier checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier invalidLengthOfCreditCardErrorMessage).
	
	"invariante no quedo como pagado que hacemos aca?"! !

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:36:12'!
ERROR!
!Cashier class methodsFor: 'error messages' stamp: 'sjd 11/2/2019 19:36:47'!
invalidLengthOfCreditCardErrorMessage
	
	^ 'Invalid length of credit card. Please verify your information or try with another credit card'! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 19:37:34' prior: 50781343!
checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner

	self assertCreditCardNotExpiredFor: anExpirationDate.
	self assertCreditCardLengthFor: aCreditCardNumber.
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 19:38:03'!
assertCreditCardLengthFor: aCreditCardNumber.

	^ aCreditCardNumber size = 16.	
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sjd 11/2/2019 19:38:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sjd 11/2/2019 19:38:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sjd 11/2/2019 19:38:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sjd 11/2/2019 19:38:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sjd 11/2/2019 19:38:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sjd 11/2/2019 19:38:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sjd 11/2/2019 19:38:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sjd 11/2/2019 19:38:23'!
PASSED!

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 19:38:23'!
PASSED!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 19:38:23'!
PASSED!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 19:38:23'!
PASSED!

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 19:38:23'!
PASSED!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:38:23'!
FAILURE!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:38:23'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 19:38:50' prior: 50781523!
assertCreditCardLengthFor: aCreditCardNumber.

	^ aCreditCardNumber size = 16 ifFalse: [ self error: self class invalidLengthOfCreditCardErrorMessage. ].	
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sjd 11/2/2019 19:38:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sjd 11/2/2019 19:38:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sjd 11/2/2019 19:38:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sjd 11/2/2019 19:38:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sjd 11/2/2019 19:38:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sjd 11/2/2019 19:38:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sjd 11/2/2019 19:38:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sjd 11/2/2019 19:38:52'!
PASSED!

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 19:38:52'!
PASSED!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 19:38:52'!
PASSED!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 19:38:52'!
PASSED!

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 19:38:52'!
PASSED!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:38:52'!
FAILURE!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:38:52'!
FAILURE!
!Cashier class methodsFor: 'error messages' stamp: 'sjd 11/2/2019 19:39:33' prior: 50781326!
expiratedCreditCardErrorMessage
	
	^ 'Expirated credit card. Please verify your information or try with another credit card.'! !
!Cashier class methodsFor: 'error messages' stamp: 'sjd 11/2/2019 19:39:41' prior: 50781633!
expiratedCreditCardErrorMessage
	
	^ 'Expirated credit card. Please verify your information or try with another credit card.'.! !

----SNAPSHOT----(2 November 2019 19:39:54) CuisUniversity-3938.image priorSource: 14356216!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:39:59'!
FAILURE!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:39:59'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 19:40:51' prior: 50781474!
test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength

	| aCart cashier aPriceList aCreditCardNumber anExpirationDate anOwner |
	aCart := Cart acceptingItemsOf: #('validItem').
	aCart add: 'validItem'.

	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	
	aCreditCardNumber := 11112222333344444.
	anExpirationDate := March ofYear: (GregorianYear number: 2020).
	anOwner := 'Dago de Renteria'.
	
	self should: [ cashier checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier invalidLengthOfCreditCardErrorMessage).
	
	"invariante no quedo como pagado que hacemos aca?"! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 19:41:10' prior: 50781429!
test04CheckOutForAnExpiredCreditCardRaiseError

	| aCart cashier aPriceList aCreditCardNumber anExpirationDate anOwner |
	aCart := Cart acceptingItemsOf: #('validItem').
	aCart add: 'validItem'.

	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	
	aCreditCardNumber := 1111222233334444.
	anExpirationDate := March ofYear: (GregorianYear number: 2018).
	anOwner := 'Dago de Renteria'.
	
	self should: [ cashier checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier expiratedCreditCardErrorMessage).
	
	"invariante no quedo como pagado que hacemos aca?"! !

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 19:41:11'!
FAILURE!

----QUIT----(2 November 2019 19:41:44) CuisUniversity-3938.image priorSource: 14399873!

----STARTUP---- (2 November 2019 19:41:49) as /home/dago/Documents/Facultad/isw1/isw1/linux64/CuisUniversity-3938.image!

!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 19:42:12' prior: 50781384!
assertCreditCardNotExpiredFor: anExpirationDate

	anExpirationDate < (GregorianMonthOfYear current) ifTrue: [self error: self class expiratedCreditCardErrorMessage ].
	! !

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 19:42:17'!
PASSED!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:42:19'!
FAILURE!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:42:19'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 19:43:17' prior: 50781577!
assertCreditCardLengthFor: aCreditCardNumber.

	^ aCreditCardNumber length = 16 ifFalse: [ self error: self class invalidLengthOfCreditCardErrorMessage. ].	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 19:44:47' prior: 50781744!
assertCreditCardLengthFor: aCreditCardNumber.

	^ aCreditCardNumber digitLength = 16 ifFalse: [ self error: self class invalidLengthOfCreditCardErrorMessage. ]. 	
	
	! !

1222 digitLength !

1222 digitLength!

1222  length  !

1222 decimalDigitLength !

122222 decimalDigitLength !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 19:46:33' prior: 50781752!
assertCreditCardLengthFor: aCreditCardNumber.

	^ aCreditCardNumber decimalDigitLength = 16 ifFalse: [ self error: self class invalidLengthOfCreditCardErrorMessage. ]. 	
	
	! !

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:46:37'!
PASSED!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:46:51'!
PASSED!

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 19:46:54'!
PASSED!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 19:46:54'!
PASSED!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 19:46:54'!
PASSED!

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 19:46:54'!
PASSED!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:46:54'!
PASSED!

'asdasd' decimalDigitLength!

----SNAPSHOT----(2 November 2019 19:51:25) CuisUniversity-3938.image priorSource: 14402127!
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 19:52:24' prior: 50781514!
checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner

	self assertCreditCardNotExpiredFor: anExpirationDate.
	self assertCreditCardLengthFor: aCreditCardNumber.
	
	self debit: total from: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner.
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'sjd 11/2/2019 19:52:50'!
debit: anAmount from: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner.

		
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:52:53'!
PASSED!

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'sjd 11/2/2019 19:52:58'!
PASSED!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'sjd 11/2/2019 19:52:58'!
PASSED!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'sjd 11/2/2019 19:52:58'!
PASSED!

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'sjd 11/2/2019 19:52:58'!
PASSED!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'sjd 11/2/2019 19:52:58'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'sjd 11/2/2019 19:53:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'sjd 11/2/2019 19:53:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'sjd 11/2/2019 19:53:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'sjd 11/2/2019 19:53:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'sjd 11/2/2019 19:53:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'sjd 11/2/2019 19:53:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'sjd 11/2/2019 19:53:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'sjd 11/2/2019 19:53:00'!
PASSED!

----SNAPSHOT----(2 November 2019 19:53:07) CuisUniversity-3938.image priorSource: 14404760!

----QUIT----(2 November 2019 19:53:09) CuisUniversity-3938.image priorSource: 14408253!

----STARTUP---- (4 November 2019 17:11:13) as /home/drenteria/Documentos/isI/isw1/linux64/CuisUniversity-3938.image!

!CartTest methodsFor: 'tests' stamp: 'dr 11/4/2019 18:40:39'!
test09EmptyCartHasTotalZero
	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'dr 11/4/2019 18:40:49'!
test09EmptyCartHasTotalCostZero
	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !

!methodRemoval: CartTest #test09EmptyCartHasTotalZero stamp: 'dr 11/4/2019 18:40:49'!
test09EmptyCartHasTotalZero
	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2!
!CartTest methodsFor: 'tests' stamp: 'dr 11/4/2019 18:41:19' prior: 50781926!
test09EmptyCartHasTotalCostZero
	| cart |
	
	cart := self createCart.
	
	self assert: (cart totalCost) equals: 2.! !
!CartTest methodsFor: 'tests' stamp: 'dr 11/4/2019 18:41:24' prior: 50781943!
test09EmptyCartHasTotalCostZero
	| cart |
	
	cart := self createCart.
	
	self assert: (cart totalCost) equals: 0.! !
!CartTest methodsFor: 'tests' stamp: 'dr 11/4/2019 18:41:30' prior: 50781950!
test09EmptyCartHasTotalCostZero
	| cart |
	
	cart := self createCart.
	
	self assert: (cart totalCost) isZero.! !

!testRun: #CartTest #test09EmptyCartHasTotalCostZero stamp: 'dr 11/4/2019 18:41:30'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 18:41:37'!
totalCost
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 18:41:49' prior: 50781966!
totalCost
	
	^ 0.! !

!testRun: #CartTest #test09EmptyCartHasTotalCostZero stamp: 'dr 11/4/2019 18:42:03'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'dr 11/4/2019 18:42:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'dr 11/4/2019 18:42:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'dr 11/4/2019 18:42:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'dr 11/4/2019 18:42:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'dr 11/4/2019 18:42:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'dr 11/4/2019 18:42:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'dr 11/4/2019 18:42:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'dr 11/4/2019 18:42:03'!
PASSED!

!testRun: #CartTest #test09EmptyCartHasTotalCostZero stamp: 'dr 11/4/2019 18:42:03'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'dr 11/4/2019 18:43:40'!
test10CartTotalCostEqualTotalOfItems
	| cart |
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	self assert: (cart totalCost) isZero.! !
!CartTest methodsFor: 'tests' stamp: 'dr 11/4/2019 18:44:06' prior: 50782004!
test10CartTotalCostEqualTotalOfItems
	| cart |
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	self assert: (cart totalCost) equals: self priceForItemSellByStore.! !
!CartTest methodsFor: 'support' stamp: 'dr 11/4/2019 18:44:29'!
priceForItemSellByStore
	
	^ 5.! !
!CartTest methodsFor: 'support' stamp: 'dr 11/4/2019 18:44:37' prior: 50782020!
priceForItemSellByStore
	
	^ 5 * peso.! !
!CartTest methodsFor: 'support' stamp: 'dr 11/4/2019 18:45:37' prior: 50780479!
defaultCatalog
	
	^ Dictionary new add: (Association key: self itemSellByTheStore value: self priceForItemSellByStore).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'dr 11/4/2019 18:46:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'dr 11/4/2019 18:46:04'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'dr 11/4/2019 18:46:04'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'dr 11/4/2019 18:46:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'dr 11/4/2019 18:46:04'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'dr 11/4/2019 18:46:04'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'dr 11/4/2019 18:46:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'dr 11/4/2019 18:46:04'!
ERROR!

!testRun: #CartTest #test09EmptyCartHasTotalCostZero stamp: 'dr 11/4/2019 18:46:04'!
PASSED!

!testRun: #CartTest #test10CartTotalCostEqualTotalOfItems stamp: 'dr 11/4/2019 18:46:04'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'dr 11/4/2019 18:46:53' prior: 50780327!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'dr 11/4/2019 18:47:05'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'dr 11/4/2019 18:47:05'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'dr 11/4/2019 18:48:05'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'dr 11/4/2019 18:48:05'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'dr 11/4/2019 18:49:23' prior: 50782028!
defaultCatalog
	
	^ Dictionary new add: (Association key: self itemSellByTheStore value: self priceForItemSellByStore); yourself.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'dr 11/4/2019 18:49:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'dr 11/4/2019 18:49:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'dr 11/4/2019 18:49:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'dr 11/4/2019 18:49:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'dr 11/4/2019 18:49:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'dr 11/4/2019 18:49:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'dr 11/4/2019 18:49:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'dr 11/4/2019 18:49:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'dr 11/4/2019 18:49:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'dr 11/4/2019 18:49:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'dr 11/4/2019 18:49:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'dr 11/4/2019 18:49:38'!
PASSED!

!testRun: #CartTest #test09EmptyCartHasTotalCostZero stamp: 'dr 11/4/2019 18:49:38'!
PASSED!

!testRun: #CartTest #test10CartTotalCostEqualTotalOfItems stamp: 'dr 11/4/2019 18:49:38'!
FAILURE!

!testRun: #CartTest #test10CartTotalCostEqualTotalOfItems stamp: 'dr 11/4/2019 18:49:38'!
FAILURE!

Object subclass: #Cart
	instanceVariableNames: 'catalog items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'dr 11/4/2019 18:50:46'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 18:51:05' prior: 50781970!
totalCost
	
	^ total.! !
!Cart methodsFor: 'initialization' stamp: 'dr 11/4/2019 18:51:19' prior: 50780340!
initializeAcceptingItemsOf: aCatalog

	total := 0.
	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'initialization' stamp: 'dr 11/4/2019 18:51:35' prior: 50782156!
initializeAcceptingItemsOf: aCatalog

	total := 0 * peso.
	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'adding' stamp: 'dr 11/4/2019 18:53:02' prior: 50780358!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.
	
	1 to: aQuantity do: [ :aNumber | items add: anItem.
										 total := total + (self priceFor: anItem).
		 ]! !
!Cart methodsFor: 'error messages' stamp: 'dr 11/4/2019 18:53:47'!
priceFor: anItem

	^ catalog at: anItem.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'dr 11/4/2019 18:53:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'dr 11/4/2019 18:53:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'dr 11/4/2019 18:53:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'dr 11/4/2019 18:53:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'dr 11/4/2019 18:53:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'dr 11/4/2019 18:53:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'dr 11/4/2019 18:53:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'dr 11/4/2019 18:53:53'!
PASSED!

!testRun: #CartTest #test09EmptyCartHasTotalCostZero stamp: 'dr 11/4/2019 18:53:53'!
PASSED!

!testRun: #CartTest #test10CartTotalCostEqualTotalOfItems stamp: 'dr 11/4/2019 18:53:53'!
PASSED!

!methodRemoval: Cashier #register: stamp: 'dr 11/4/2019 18:54:08'!
register: anItem 

	total := total + (self priceFor: anItem).!

!methodRemoval: Cashier #registerItemsOf: stamp: 'dr 11/4/2019 18:54:11'!
registerItemsOf: aCart 
	
	aCart forEachItemDo: [ :anItem | self register: anItem ].
	!

!methodRemoval: Cashier #totalCost stamp: 'dr 11/4/2019 18:54:13'!
totalCost
	
	^ total.!

!methodRemoval: Cashier #priceFor: stamp: 'dr 11/4/2019 18:54:15'!
priceFor: anItem

	^ priceList at: anItem ifAbsent: [ self error: (self class itemNotValidErrorMessageFor: anItem) ].!
!Cashier methodsFor: 'initialization' stamp: 'dr 11/4/2019 18:56:16'!
initializeFor: aCart
	
	| cart |
	cart := aCart.  ! !

!classDefinition: #Cashier category: #TusLibros stamp: 'dr 11/4/2019 18:57:19'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList total acart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'dr 11/4/2019 18:57:18' prior: 50782230!
initializeFor: aCart
	
	acart := aCart.  ! !

----SNAPSHOT----(4 November 2019 18:58:05) CuisUniversity-3938.image priorSource: 14408346!

Object subclass: #Cashier
	instanceVariableNames: 'total acart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'dr 11/4/2019 18:58:12'!
Object subclass: #Cashier
	instanceVariableNames: 'total acart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(4 November 2019 18:58:15) CuisUniversity-3938.image priorSource: 14419052!

!classDefinition: #Cashier category: #TusLibros stamp: 'dr 11/4/2019 18:58:38'!
Object subclass: #Cashier
	instanceVariableNames: 'total cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 18:58:38' prior: 50782242!
initializeFor: aCart
	
	cart := aCart.  ! !

Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'dr 11/4/2019 18:59:00'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: Cashier #initializeWithPriceList:for: stamp: 'dr 11/4/2019 18:59:09'!
initializeWithPriceList: aPriceList for: aCart
	
	priceList := aPriceList.
	total := 0 * peso.
	self registerItemsOf: aCart.!

!testRun: #CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'dr 11/4/2019 18:59:49'!
ERROR!

!testRun: #CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'dr 11/4/2019 18:59:49'!
ERROR!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'dr 11/4/2019 18:59:49'!
ERROR!

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'dr 11/4/2019 18:59:49'!
ERROR!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'dr 11/4/2019 18:59:49'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:00:22'!
test01CheckOutOfEmptyCartRaiseAnError

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	
	aPriceList := Dictionary new.
		
	cashier := Cashier withPriceList: aPriceList for: aCart.
	self assert: (cashier totalCost) equals: 0.! !

!methodRemoval: CashierTest #test01EmptyCartHasTotalCostOfZero stamp: 'dr 11/4/2019 19:00:25'!
test01EmptyCartHasTotalCostOfZero

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	
	aPriceList := Dictionary new.
		
	cashier := Cashier withPriceList: aPriceList for: aCart.
	self assert: (cashier totalCost) equals: 0.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:07:51' prior: 50782309!
test01CheckOutOfEmptyCartRaiseAnError

	| aCart cashier |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
		
	cashier := Cashier for: aCart.
	self assert: (cashier totalCost) equals: 0.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:09:03'!
defaultCatalog

	^ Dictionary new add: (Association key: 'validItem' value: 5 * peso); yourself.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:09:29'!
emptyCart

	^ Cart acceptingItemsOf: self defaultCatalog.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:10:22'!
defaultCart

	^ Cart acceptingItemsOf: self defaultCatalog; add: self anItemSellByTheStore; yourself.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:10:43'!
anItemSellByTheStore

	^ 'validItem'
	.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:10:45' prior: 50782358!
anItemSellByTheStore

	^ 'validItem'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:11:09' prior: 50782352!
defaultCart

	^ self emptyCart add: self anItemSellByTheStore; yourself.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:13:51' prior: 50782332!
test01CheckOutOfEmptyCartRaiseAnError

	| aCreditCard |
	self should: [ self emptyCart checkOutFor: aCreditCard. ]
		  raise: Error - MessageNotUnderstood
		  withMessageText: Cashier canNotCheckOutAnEmptyCartError.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'dr 11/4/2019 19:17:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonthYear owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:17:27'!
aValidCreditCard 

	^ CreditCard number: 1234567890123456 expirationMonthYear: (March ofYear: (GregorianYear number: 2020)) owner: 'Name MiddleName Surname'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:18:31'!
validExpirationMonthYear 

	^ March ofYear: (GregorianYear number: 2020)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:18:51' prior: 50782391!
aValidCreditCard 

	^ CreditCard number: 1234567890123456 expirationMonthYear: self validExpirationMonthYear owner: 'Name MiddleName Surname'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:19:45' prior: 50782374!
test01CheckOutOfEmptyCartRaiseAnError

	self should: [ self emptyCart checkOutFor: self aValidCreditCard. ]
		  raise: Error - MessageNotUnderstood
		  withMessageText: Cashier canNotCheckOutAnEmptyCartError.
		
	" agregar invariante de que no se hizo una venta "! !

!testRun: #CashierTest #test01CheckOutOfEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:19:51'!
ERROR!

!testRun: #CashierTest #test01CheckOutOfEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:19:51'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:20:09'!
canNotCheckOutAnEmptyCartError
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:20:29' prior: 50782431!
canNotCheckOutAnEmptyCartError
	
	^ 'You can not check out an empty cart.'! !

!testRun: #CashierTest #test01CheckOutOfEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:20:34'!
ERROR!

!testRun: #CashierTest #test01CheckOutOfEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:20:34'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'dr 11/4/2019 19:20:42'!
number: aSmallInteger expirationMonthYear: aGregorianMonthOfYear owner: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aSmallInteger expirationMonthYear: aGregorianMonthOfYear owner: aString ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'dr 11/4/2019 19:21:57' prior: 50782448!
number: aCreditCardNumber expirationMonthYear: anExpirationMonthOfYear owner: anOwner
	
	^self new initializeForNumber: aCreditCardNumber expirationMonthYear: anExpirationMonthOfYear owner: anOwner.! !

!testRun: #CashierTest #test01CheckOutOfEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:22:05'!
ERROR!

!testRun: #CashierTest #test01CheckOutOfEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:22:05'!
ERROR!

!classDefinition: #CreditCard category: #TusLibros stamp: 'dr 11/4/2019 19:22:20'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonthYear owner creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'dr 11/4/2019 19:22:20'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonthYear owner creditCardNumber expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'dr 11/4/2019 19:22:20'!
initializeForNumber: aCreditCardNumber expirationMonthYear: anExpirationMonthOfYear owner: anOwner 
	self shouldBeImplemented.
	creditCardNumber := aCreditCardNumber.
	expirationMonthOfYear := anExpirationMonthOfYear.
	owner := anOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'dr 11/4/2019 19:22:45' prior: 50782492!
initializeForNumber: aCreditCardNumber expirationMonthYear: anExpirationMonthOfYear owner: anOwner 

	number := aCreditCardNumber.
	expirationMonthYear := anExpirationMonthOfYear.
	owner := anOwner.! !

Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonthYear owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'dr 11/4/2019 19:23:06'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonthYear owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CheckOutOfEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:23:16'!
ERROR!

!testRun: #CashierTest #test01CheckOutOfEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:23:16'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:23:23'!
checkOutFor: aCreditCard 
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:24:37' prior: 50782413!
test01CheckOutOfEmptyCartRaiseAnError

	| aCashier |
	
	aCashier := Cashier for: self emptyCart.
	
	self should: [ aCashier checkOutFor: self aValidCreditCard. ]
		  raise: Error - MessageNotUnderstood
		  withMessageText: Cashier canNotCheckOutAnEmptyCartError.
		
	" agregar invariante de que no se hizo una venta "! !

!testRun: #CashierTest #test01CheckOutOfEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:24:39'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'dr 11/4/2019 19:26:47'!
for: aCart

	^ self new initializeFor: aCart.! !

!methodRemoval: Cashier class #withPriceList:for: stamp: 'dr 11/4/2019 19:26:54'!
withPriceList: aPriceList for: aCart
	
	^ self new initializeWithPriceList: aPriceList for: aCart.!

!testRun: #CashierTest #test01CheckOutOfEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:27:06'!
ERROR!

!testRun: #CashierTest #test01CheckOutOfEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:27:06'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:27:14'!
checkOutFor: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:28:07' prior: 50782568!
checkOutFor: aCreditCard 

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:43:22'!
test01CashierForAnEmptyCartRaiseAnError

	self should: [ Cashier for: self emptyCart. ]
		  raise: Error - MessageNotUnderstood
		  withMessageText: Cashier canNotCheckOutAnEmptyCartError.
		
	" agregar invariante de que no se hizo una venta "! !

!methodRemoval: CashierTest #test01CheckOutOfEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:43:25'!
test01CheckOutOfEmptyCartRaiseAnError

	| aCashier |
	
	aCashier := Cashier for: self emptyCart.
	
	self should: [ aCashier checkOutFor: self aValidCreditCard. ]
		  raise: Error - MessageNotUnderstood
		  withMessageText: Cashier canNotCheckOutAnEmptyCartError.
		
	" agregar invariante de que no se hizo una venta "!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:44:04'!
canNotCreateCashierForAnEmptyCartError
	
	^ 'You can not check out an empty cart.'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:44:04' prior: 50782577!
test01CashierForAnEmptyCartRaiseAnError

	self should: [ Cashier for: self emptyCart. ]
		  raise: Error - MessageNotUnderstood
		  withMessageText: Cashier canNotCreateCashierForAnEmptyCartError.
		
	" agregar invariante de que no se hizo una venta "! !

!methodRemoval: Cashier class #canNotCheckOutAnEmptyCartError stamp: 'dr 11/4/2019 19:44:04'!
canNotCheckOutAnEmptyCartError
	
	^ 'You can not check out an empty cart.'!

!testRun: #CashierTest #test01CashierForAnEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:44:22'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'dr 11/4/2019 19:45:10' prior: 50782270!
initializeFor: aCart
	
	aCart isEmpty ifTrue: [ self error: self class canNotCreateCashierForAnEmptyCartError ].
	
	cart := aCart.  ! !
!Cart methodsFor: 'testing' stamp: 'dr 11/4/2019 19:45:27' prior: 50780354!
isEmpty
	
	^ items isEmpty ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:46:14' prior: 50782607!
test01CashierForAnEmptyCartRaiseAnError

	self should: [ Cashier for: self emptyCart. ]
		  raise: Error - MessageNotUnderstood
		  withMessageText: Cashier canNotCreateCashierForAnEmptyCartError.
		
	" agregar invariante de que no se hizo una venta "! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:46:52' prior: 50782638!
test01CashierForAnEmptyCartRaiseAnError

	self should: [ Cashier for: self emptyCart. ]
		  raise: Error - MessageNotUnderstood
		  withMessageText: Cashier canNotCreateCashierForAnEmptyCartError.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:49:43'!
test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem

	| cashier |
	
	cashier := Cashier for: self defaultCart.
	
	self assert: (cashier checkOut) equals: 5 * peso.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:51:07' prior: 50782658!
test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem

	| cashier aDate aSalesBook |
	
	cashier := Cashier for: self defaultCart.
	
	self assert: (cashier checkOutFor: self aValidCreditCard registerIn: aSalesBook at: aDate) equals: 5 * peso.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:52:28' prior: 50782667!
test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem

	| cashier aDate aSalesBook |
	
	cashier := Cashier for: self defaultCart.
	
	aDate := 04/11/2019.
	
	self assert: (cashier checkOutFor: self aValidCreditCard registerIn: aSalesBook at: aDate) equals: 5 * peso.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:54:32' prior: 50782678!
test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem

	| cashier aDate aSalesBook |
	
	aDate := 04/11/2019.
	aSalesBook := OrderedCollection new.

	cashier := Cashier for: self defaultCart.

	self assert: (cashier checkOutFor: self aValidCreditCard registerIn: aSalesBook at: aDate) equals: self priceForItemSellByStore .
	self assert: aSalesBook last equals: cashier.! !

!methodRemoval: CashierTest #test02CartWithValidItemHasTotalCostOfThatItem stamp: 'dr 11/4/2019 19:54:42'!
test02CartWithValidItemHasTotalCostOfThatItem

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('validItem1','validItem2').
	aCart add: 'validItem1'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem1' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	self assert: (cashier totalCost) equals: 5 * peso.!

!testRun: #CashierTest #test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem stamp: 'dr 11/4/2019 19:54:56'!
ERROR!

!testRun: #CashierTest #test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem stamp: 'dr 11/4/2019 19:54:56'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:55:04'!
checkOutFor: aCreditCard registerIn: anOrderedCollection at: aFraction 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:55:39' prior: 50782727!
checkOutFor: aCreditCard registerIn: aSalesBook at: aDate

	aSalesBook add: self.
	
	! !

!testRun: #CashierTest #test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem stamp: 'dr 11/4/2019 19:55:45'!
ERROR!

!testRun: #CashierTest #test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem stamp: 'dr 11/4/2019 19:55:45'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:56:16'!
priceForItemSellByStore
	
	^ 5 * peso.! !

!testRun: #CashierTest #test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem stamp: 'dr 11/4/2019 19:56:28'!
FAILURE!

!testRun: #CashierTest #test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem stamp: 'dr 11/4/2019 19:56:28'!
FAILURE!

!methodRemoval: Cashier #checkOutFor: stamp: 'dr 11/4/2019 19:56:45'!
checkOutFor: aCreditCard 

	!

!methodRemoval: Cashier #checkOutFor:withExpirationDate:withOwner: stamp: 'dr 11/4/2019 19:56:48'!
checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner

	self assertCreditCardNotExpiredFor: anExpirationDate.
	self assertCreditCardLengthFor: aCreditCardNumber.
	
	self debit: total from: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner.
	
	
	!
!Cashier methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:57:15' prior: 50782734!
checkOutFor: aCreditCard registerIn: aSalesBook at: aDate

	aSalesBook add: self.
	
	^ cart totalCost.
	
	! !

!testRun: #CashierTest #test01CashierForAnEmptyCartRaiseAnError stamp: 'dr 11/4/2019 19:57:28'!
PASSED!

!testRun: #CashierTest #test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem stamp: 'dr 11/4/2019 19:57:28'!
PASSED!

!testRun: #CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'dr 11/4/2019 19:57:28'!
ERROR!

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'dr 11/4/2019 19:57:28'!
ERROR!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'dr 11/4/2019 19:57:28'!
ERROR!

!testRun: #CashierTest #test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem stamp: 'dr 11/4/2019 19:57:37'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:58:42'!
test02CheckOutOfCartWithValidCardReturnsTotalCostOfCart

	| cashier aDate aSalesBook |
	
	aDate := 04/11/2019.
	aSalesBook := OrderedCollection new.

	cashier := Cashier for: self defaultCart.

	self assert: (cashier checkOutFor: self aValidCreditCard registerIn: aSalesBook at: aDate) equals: self priceForItemSellByStore .
	self assert: aSalesBook last equals: cashier.! !

!methodRemoval: CashierTest #test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem stamp: 'dr 11/4/2019 19:58:43'!
test02CheckOutOfCartWithValidItemReturnsTotalCostOfItem

	| cashier aDate aSalesBook |
	
	aDate := 04/11/2019.
	aSalesBook := OrderedCollection new.

	cashier := Cashier for: self defaultCart.

	self assert: (cashier checkOutFor: self aValidCreditCard registerIn: aSalesBook at: aDate) equals: self priceForItemSellByStore .
	self assert: aSalesBook last equals: cashier.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 19:59:30'!
test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError

	| cashier aDate aSalesBook |
	
	aDate := 04/11/2019.
	aSalesBook := OrderedCollection new.

	cashier := Cashier for: self defaultCart.

	self assert: (cashier checkOutFor: self aValidCreditCard registerIn: aSalesBook at: aDate) equals: self priceForItemSellByStore .
	self assert: aSalesBook last equals: cashier.! !

!methodRemoval: CashierTest #test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList stamp: 'dr 11/4/2019 19:59:35'!
test03CartWithInvalidItemRaiseErrorOfItemNotKnownInPriceList

	| aCart cashier aPriceList |
	aCart := Cart acceptingItemsOf: #('invalidItem').
	aCart add: 'invalidItem'.
	
	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	self should: [cashier := Cashier withPriceList: aPriceList for: aCart. ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier itemNotValidErrorMessageFor: 'invalidItem').
	
	self assert: cashier isNil.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:01:30' prior: 50782834!
test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError

	| cashier aDate aSalesBook |
	
	aDate := 04/11/2019.
	aSalesBook := OrderedCollection new.

	cashier := Cashier for: self defaultCart.

	self should: [ cashier checkOutFor: self anExpiredCreditCard registerIn: aSalesBook at: aDate ]
		 raise: Error - MessageNotUnderstood
		 withMessageText: Cashier expiredCreditCardError.
	
	self assert: aSalesBook isEmpty.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:03:21'!
anExpiredCreditCard

	^ CreditCard number: 1111222233334444 expirationMonthYear: (July ofYear: (GregorianYear number: 2018)) owner: 'NotCool Owner'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:03:27' prior: 50782884!
anExpiredCreditCard

	^ CreditCard number: 1111222233334444 expirationMonthYear: (July ofYear: (GregorianYear number: 2018)) owner: 'NotCool Owner'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:04:07'!
anExpiredMonthYear

	^ July ofYear: (GregorianYear number: 2018).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:04:28' prior: 50782892!
anExpiredCreditCard

	^ CreditCard number: 1111222233334444 expirationMonthYear: self anExpiredMonthYear owner: 'NotCool Owner'.! !

!testRun: #CashierTest #test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError stamp: 'dr 11/4/2019 20:04:46'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:04:58'!
expiredCreditCardError
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:05:24' prior: 50782917!
expiredCreditCardError
	
	^ 'The credit card is expired. Please change your information or try again later.'! !

!testRun: #CashierTest #test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError stamp: 'dr 11/4/2019 20:05:30'!
FAILURE!

!testRun: #CashierTest #test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError stamp: 'dr 11/4/2019 20:05:30'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:06:14' prior: 50782775!
checkOutFor: aCreditCard registerIn: aSalesBook at: aDate

	self assertCreditCardNotExpiredFor: aCreditCard.

	aSalesBook add: self.
	
	^ cart totalCost.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:06:42' prior: 50782937!
checkOutFor: aCreditCard registerIn: aSalesBook at: aDate

	self assertCreditCardNotExpiredFor: aCreditCard at: aDate.

	aSalesBook add: self.
	
	^ cart totalCost.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:08:12'!
assertCreditCardNotExpiredFor: aCreditCard at: aCheckOutDate

	(aCreditCard isExpiredAt: aCheckOutDate) ifTrue: [self error: self class expiratedCreditCardErrorMessage ].
	! !

!methodRemoval: Cashier class #expiredCreditCardError stamp: 'dr 11/4/2019 20:08:36'!
expiredCreditCardError
	
	^ 'The credit card is expired. Please change your information or try again later.'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:08:50' prior: 50782868!
test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError

	| cashier aDate aSalesBook |
	
	aDate := 04/11/2019.
	aSalesBook := OrderedCollection new.

	cashier := Cashier for: self defaultCart.

	self should: [ cashier checkOutFor: self anExpiredCreditCard registerIn: aSalesBook at: aDate ]
		 raise: Error - MessageNotUnderstood
		 withMessageText: Cashier expiratedCreditCardErrorMessage .
	
	self assert: aSalesBook isEmpty.! !

!testRun: #CashierTest #test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError stamp: 'dr 11/4/2019 20:08:52'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:08:58'!
isExpiredAt: aFraction 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:10:23' prior: 50782988!
isExpiredAt: aDate

	expirationMonthYear < (GregorianMonthOfYear year: aDate year month: aDate month).

	
	
	! !

!testRun: #CashierTest #test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError stamp: 'dr 11/4/2019 20:10:40'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:13:08' prior: 50782968!
test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError

	| cashier aDate aSalesBook |
	
	aDate := GregorianDate year: 2019 month: November day: 4.
	aSalesBook := OrderedCollection new.

	cashier := Cashier for: self defaultCart.

	self should: [ cashier checkOutFor: self anExpiredCreditCard registerIn: aSalesBook at: aDate ]
		 raise: Error - MessageNotUnderstood
		 withMessageText: Cashier expiratedCreditCardErrorMessage .
	
	self assert: aSalesBook isEmpty.! !

!testRun: #CashierTest #test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError stamp: 'dr 11/4/2019 20:13:10'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:14:52' prior: 50783004!
test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError

	| cashier aDate aSalesBook |
	
	aDate := FixedGregorianDate year: 2019 month: November day: 4.
	aSalesBook := OrderedCollection new.

	cashier := Cashier for: self defaultCart.

	self should: [ cashier checkOutFor: self anExpiredCreditCard registerIn: aSalesBook at: aDate ]
		 raise: Error - MessageNotUnderstood
		 withMessageText: Cashier expiratedCreditCardErrorMessage .
	
	self assert: aSalesBook isEmpty.! !

!testRun: #CashierTest #test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError stamp: 'dr 11/4/2019 20:14:53'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:15:57' prior: 50783026!
test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError

	| cashier aDate aSalesBook |
	
	aDate := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 04.
	aSalesBook := OrderedCollection new.

	cashier := Cashier for: self defaultCart.

	self should: [ cashier checkOutFor: self anExpiredCreditCard registerIn: aSalesBook at: aDate ]
		 raise: Error - MessageNotUnderstood
		 withMessageText: Cashier expiratedCreditCardErrorMessage .
	
	self assert: aSalesBook isEmpty.! !

!testRun: #CashierTest #test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError stamp: 'dr 11/4/2019 20:16:05'!
FAILURE!

!testRun: #CashierTest #test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError stamp: 'dr 11/4/2019 20:16:35'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:17:15' prior: 50782993!
isExpiredAt: aDate

	^ expirationMonthYear < (GregorianMonthOfYear year: aDate year month: aDate month).

	
	
	! !

!testRun: #CashierTest #test01CashierForAnEmptyCartRaiseAnError stamp: 'dr 11/4/2019 20:17:19'!
PASSED!

!testRun: #CashierTest #test02CheckOutOfCartWithValidCardReturnsTotalCostOfCart stamp: 'dr 11/4/2019 20:17:19'!
ERROR!

!testRun: #CashierTest #test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError stamp: 'dr 11/4/2019 20:17:19'!
PASSED!

!testRun: #CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'dr 11/4/2019 20:17:19'!
ERROR!

!testRun: #CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'dr 11/4/2019 20:17:19'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:17:49' prior: 50782804!
test02CheckOutOfCartWithValidCardReturnsTotalCostOfCart

	| cashier aDate aSalesBook |
	
	aDate := FixedGregorianDate yearNumber: 2019 monthNumber: 11 dayNumber: 04.
	aSalesBook := OrderedCollection new.

	cashier := Cashier for: self defaultCart.

	self assert: (cashier checkOutFor: self aValidCreditCard registerIn: aSalesBook at: aDate) equals: self priceForItemSellByStore .
	self assert: aSalesBook last equals: cashier.! !

!testRun: #CashierTest #test01CashierForAnEmptyCartRaiseAnError stamp: 'dr 11/4/2019 20:17:51'!
PASSED!

!testRun: #CashierTest #test02CheckOutOfCartWithValidCardReturnsTotalCostOfCart stamp: 'dr 11/4/2019 20:17:54'!
PASSED!

!testRun: #CashierTest #test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError stamp: 'dr 11/4/2019 20:17:56'!
PASSED!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'dr 11/4/2019 20:21:14'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'no messages' stamp: 'dr 11/4/2019 20:21:56'!
test01CanNotCreateACreditCardWithInvalidLength

	! !

!methodRemoval: Cashier #assertCreditCardNotExpiredFor: stamp: 'dr 11/4/2019 20:22:17'!
assertCreditCardNotExpiredFor: anExpirationDate

	anExpirationDate < (GregorianMonthOfYear current) ifTrue: [self error: self class expiratedCreditCardErrorMessage ].
	!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:27:09' prior: 50783137!
test01CanNotCreateACreditCardWithInvalidLength

	self should: [ CreditCard number: 111122223333444 expirationMonthYear: (March ofYear: (GregorianYear yearNumber: 2019)) owner: 'Yo' ]
		 raise: Error - MessageNotUnderstood
		 withMessageText: CreditCard invalidLengthErrorMessage.! !

!testRun: #CreditCardTest #test01CanNotCreateACreditCardWithInvalidLength stamp: 'dr 11/4/2019 20:27:13'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:27:20'!
invalidLengthErrorMessage
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:27:55' prior: 50783166!
invalidLengthErrorMessage
	
	'The length of the number should be 16 (sixteen) digits.'! !

!testRun: #CreditCardTest #test01CanNotCreateACreditCardWithInvalidLength stamp: 'dr 11/4/2019 20:28:03'!
ERROR!

!testRun: #CreditCardTest #test01CanNotCreateACreditCardWithInvalidLength stamp: 'dr 11/4/2019 20:28:30'!
ERROR!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'dr 11/4/2019 20:28:52' prior: 50783150!
test01CanNotCreateACreditCardWithInvalidLength

	self should: [ CreditCard number: 111122223333444 expirationMonthYear: (March ofYear: (GregorianYear number: 2019)) owner: 'Yo' ]
		 raise: Error - MessageNotUnderstood
		 withMessageText: CreditCard invalidLengthErrorMessage.! !

!testRun: #CreditCardTest #test01CanNotCreateACreditCardWithInvalidLength stamp: 'dr 11/4/2019 20:28:53'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'dr 11/4/2019 20:31:24' prior: 50782503!
initializeForNumber: aCreditCardNumber expirationMonthYear: anExpirationMonthOfYear owner: anOwner 

	aCreditCardNumber decimalDigitLength = 16 ifFalse: [ self error: self class invalidLengthErrorMessage . ]. 

	number := aCreditCardNumber.
	expirationMonthYear := anExpirationMonthOfYear.
	owner := anOwner.! !

!testRun: #CreditCardTest #test01CanNotCreateACreditCardWithInvalidLength stamp: 'dr 11/4/2019 20:31:30'!
PASSED!

!methodRemoval: CashierTest #test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength stamp: 'dr 11/4/2019 20:38:30'!
test05CheckOutForACreditCardWithInvalidLengthRaiseErrorOfLength

	| aCart cashier aPriceList aCreditCardNumber anExpirationDate anOwner |
	aCart := Cart acceptingItemsOf: #('validItem').
	aCart add: 'validItem'.

	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	
	aCreditCardNumber := 11112222333344444.
	anExpirationDate := March ofYear: (GregorianYear number: 2020).
	anOwner := 'Dago de Renteria'.
	
	self should: [ cashier checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier invalidLengthOfCreditCardErrorMessage).
	
	"invariante no quedo como pagado que hacemos aca?"!

!methodRemoval: CashierTest #test04CheckOutForAnExpiredCreditCardRaiseError stamp: 'dr 11/4/2019 20:38:34'!
test04CheckOutForAnExpiredCreditCardRaiseError

	| aCart cashier aPriceList aCreditCardNumber anExpirationDate anOwner |
	aCart := Cart acceptingItemsOf: #('validItem').
	aCart add: 'validItem'.

	aPriceList := Dictionary new.
	aPriceList add: (Association key: 'validItem' value: 5 * peso).
	
	cashier := Cashier withPriceList: aPriceList for: aCart.
	
	aCreditCardNumber := 1111222233334444.
	anExpirationDate := March ofYear: (GregorianYear number: 2018).
	anOwner := 'Dago de Renteria'.
	
	self should: [ cashier checkOutFor: aCreditCardNumber withExpirationDate: anExpirationDate withOwner: anOwner ]
		 raise: Error - MessageNotUnderstood 
		 withMessageText: (Cashier expiratedCreditCardErrorMessage).
	
	"invariante no quedo como pagado que hacemos aca?"!

!testRun: #CashierTest #test03CheckOutOfCartWithCardExpiredRaiseCardExpiredError stamp: 'dr 11/4/2019 20:42:31'!
PASSED!

----SNAPSHOT----(4 November 2019 21:00:21) CuisUniversity-3938.image priorSource: 14419495!

----QUIT----(4 November 2019 21:00:25) CuisUniversity-3938.image priorSource: 14451999!